---
// Components
import Layout from "../../layouts/Layout.astro";
import PageHero from "../../components/PageHero.astro";
import ProductCard from "../../components/product/ProductCard.astro";

// Interfaces
import type IProduct from "../../interfaces/IProduct";

const id = Astro.params.product;

// Fetch product data
const response = await fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/products/${id}/?populate=*`);
const data = await response.json();
const product = {
  id: data.data.id,
  title: data.data.attributes.title,
  price: data.data.attributes.price,
  image: data.data.attributes.image.data.attributes.url
} as IProduct

// Buttons/Links data
const actions = [
  { actionName: "Edit", action: "modal", actionData: `${product.id}` },
  { actionName: "Delete", action: "", actionData: `${product.id}` },
];
---

<Layout>
  <div class="container d-flex flex-column flex-column-fluid p-10 pb-lg-20">
    <PageHero name={product.title} actions={actions} />
    <ProductCard product={product} fullScreen={true}/>
  </div>
</Layout>

<script>
  //////////////////////////////////////////
  // Show toast function
  const showToast = (title: string, message: string) => {
    // Get toast elements
    const toastEl = document.querySelector(".toast") as HTMLElement
    const titleEl = toastEl.querySelector(".me-auto") as HTMLElement
    const bodyEl = toastEl.querySelector(".toast-body") as HTMLElement

    // Set title and message
    titleEl.textContent = title
    bodyEl.textContent = message

    // Show notification
    toastEl.classList.remove("hide")
    toastEl.classList.add("show")
  }
  //////////////////////////////////////////
  // Edit/Delete Product
  const pageHero = document.querySelector("#kt_app_toolbar") as HTMLElement
  pageHero.addEventListener('click', (event) => {
    const element = event.target as HTMLElement

    //////////////////////////////////////////
    // Edit product
    if(element.dataset.bsToggle) {
      const productId = element.dataset.productid;

      // Get product data
      fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/products/${productId}/?populate=*`)
        .then(res => res.json()).then(data => 
        {
          // Get form
          const form = document.querySelector("#kt_ecommerce_add_product_form") as HTMLFormElement;

          // Get image data
          const imageUrl = data.data.attributes.image.data.attributes.url;
          const imageId = data.data.attributes.image.data.id

          // Fill inputs with product data
          const titleInput = form.querySelector('input[name="title"]') as HTMLInputElement
          titleInput.value = data.data.attributes.title
          const priceInput = form.querySelector('input[name="price"]') as HTMLInputElement
          priceInput.value = data.data.attributes.price
          const image = form.querySelector("#product_image") as HTMLDivElement
          image.style.backgroundImage = `url("${import.meta.env.PUBLIC_SERVER_URL}${imageUrl}")`

          // Add event listener to form
          form.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Get image data in formData for upload and save title/price for future use
            const payload = new FormData(form)
            const title = payload.get("title");
            const price = payload.get("price");
            payload.delete("title")
            payload.delete("price")

            // Try to upload image
            fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/upload`, {
                method: "POST", body: payload
              })
            .then(res => res.json())
            .then(data => {
              // Use original image id, if uploading of the new image was unsuccesful
              let imgId = imageId

              // If uploading was succesful get uploaded image id
              if(!data.error){
                imgId = data[0].id
              }

              // Create updated product object
              const product = {
                title,
                price,
                image: imgId
              }
              
              // Update product on the server
              fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/products/${productId}`,{
                method: "PUT",
                headers: new Headers({
                  'Authorization': `Bearer ${document.cookie.slice(10)}`, 
                  'Content-Type': 'application/json'
                }),
                body: JSON.stringify({data: product})
              })
              .then(res => {
                if(res.ok === false) {
                  showToast("Error", "OOPS :( Maybe you haven't SIGN IN ðŸ˜¬")
                }
                if(res.ok === true) {
                  window.location.href = "/products"
                }
                // Close modal
                document.querySelector("#kt_modal_1")!.classList.remove("show")
                document.querySelector(".modal-backdrop")!.classList.remove("show")
              })
            })
            .catch(err => {
              // Close modal
              document.querySelector("#kt_modal_1")!.classList.remove("show")
              document.querySelector(".modal-backdrop")!.classList.remove("show")
              // Show toast
              showToast("Error", "Something went wrong! Try to stay calm and positive.")
            })
          });
        })
    } 

    //////////////////////////////////////////
    // Delete product
    if(!element.dataset.bsToggle) {
      // Get product id
      const productId = element.dataset.productid;
      // Delete product
      fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/products/${productId}`,{
        method: "DELETE",
        headers: new Headers({
          'Authorization': `Bearer ${document.cookie.slice(10)}`, 
          'Content-Type': 'application/json'
        })
      })
      .then(res => {
        if(res.ok === false) {
          showToast("Error", "OOPS :( Maybe you haven't SIGN IN ðŸ˜¬")
        }
        if(res.ok === true) {
          window.location.href = "/products"
        }
      })
      .catch(err =>  {
        // Close modal
        document.querySelector("#kt_modal_1")!.classList.remove("show")
        document.querySelector(".modal-backdrop")!.classList.remove("show")
        // Show toast
        showToast("Error", "Something went wrong! Try to stay calm and positive.")
      })
    }
  })
</script>