---
// Components
import Header from "../components/header/Header.astro";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!--begin::Fonts-->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700"
    />
    <!--end::Fonts-->
    <!--begin::Global Stylesheets Bundle(used by all pages)-->
    <link
      href="/assets/plugins/global/plugins.bundle.css"
      rel="stylesheet"
      type="text/css"
    />
    <link
      href="/assets/css/style.bundle.css"
      rel="stylesheet"
      type="text/css"
    />
    <!--end::Global Stylesheets Bundle-->
    <title>Test App</title>
  </head>
  <body id="kt_body" class="bg-body">
    <div class="d-flex flex-column flex-root app-root" id="kt_app_root">
      <div class="app-page flex-column flex-column-fluid" id="kt_app_page">
        <!--begin::Header-->
        <Header />
        <!--end::Header-->
        <!--begin::Main content-->
        <div class="d-flex flex-column flex-column-fluid" id="main_content">
          <slot />
        </div>
        <!--end::Main content-->
      </div>
    </div>
    <!--begin::Global Javascript Bundle-->
    <script is:inline src="/assets/plugins/global/plugins.bundle.js"></script>
    <script is:inline src="/assets/js/scripts.bundle.js"></script>
    <!--end::Global Javascript Bundle-->
  </body>
</html>

<script>
  //////////////////////////////////////////
  // Sign out
  const signOutBtn = document.querySelector("#sign_out") as HTMLElement
  signOutBtn.addEventListener("click", function() {
    // Delete cookie using 'cookie' endpoint
    fetch(`${import.meta.env.PUBLIC_CLIENT_URL}/cookie`)
    .then(res => {
      // Redirect
      window.location.href = "/auth/signin"
    })
    .catch(err => console.log(err))
  })
  //////////////////////////////////////////
  // Delete cart item
  const cart = document.querySelector("#cart") as HTMLElement
  cart.addEventListener('click', event => {
    const element = event.target as HTMLElement
    if (element.classList.contains("delete_btn")) {
      const cartItemToDeleteId = +element.getAttribute("data-id")!;
      // Get cart
      fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/users/me/?populate=deep,3`, {
        headers: new Headers({
          'Authorization': `Bearer ${document.cookie.slice(10)}`, 
          'Content-Type': 'application/x-www-form-urlencoded'
        }),
      })
      .then(res => res.json())
      .then(data => {
        // Update user cart, need only product ids --> example [3, 4, 6]
        const updatedCart = data.cart
          .filter((cartItem: { id: number }) => cartItem.id !== cartItemToDeleteId)
          .map((cartItem: { id: number }) => cartItem.id)

        fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/users/${data.id}`, {
          method: "PUT",
          headers: new Headers({
            'Authorization': `Bearer ${document.cookie.slice(10)}`, 
            'Content-Type': 'application/json'
          }),
          body: JSON.stringify({cart: [...updatedCart]})
        })
      })
      .catch(err => console.log(err))
    }
  })
  //////////////////////////////////////////
  // Add to cart
  // Get cards
  const container = document.querySelector("#main_content") as HTMLElement
  // Add event listener
  container.addEventListener('click', event => {
    const element = event.target as HTMLElement
    if (element.classList.contains("add_btn")) {
      const cartItemToAddId = +element.getAttribute("data-id")!;
      // Get cart
      fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/users/me/?populate=deep,3`, {
        headers: new Headers({
          'Authorization': `Bearer ${document.cookie.slice(10)}`, 
          'Content-Type': 'application/x-www-form-urlencoded'
        }),
      })
      .then(res => res.json())
      .then(data => {
        // Update user cart, need only product ids --> example [3, 4, 6]
        let updatedCart = data.cart.map((cartItem: { id: number }) => cartItem.id)
        // Check if item is already in the cart
        if(updatedCart.indexOf(cartItemToAddId) === -1) {
          // If not, add it to the cart
          updatedCart.push(cartItemToAddId)
          fetch(`${import.meta.env.PUBLIC_SERVER_URL}/api/users/${data.id}`, {
            method: "PUT",
            headers: new Headers({
              'Authorization': `Bearer ${document.cookie.slice(10)}`, 
              'Content-Type': 'application/json'
            }),
            body: JSON.stringify({cart: [...updatedCart]})
          })
        } else {
          // If item is already in the cart send alert message
          alert("Item is already in your cart")
        }
      })
      .catch(err => console.log(err))
    }
  })
</script>